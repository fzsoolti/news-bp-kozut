const express = require('express');
const userController = require('../controllers/userController');
const authController = require('../controllers/authController');

//API routes
const router = express.Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     User:
 *       type: object
 *       properties:
 *         _id:
 *           type: string
 *           description: The auto-generated id of the user
 *         sub:
 *           type: string
 *           description: The unique ID generated by Google authentication.
 *         username:
 *           type: string
 *           description: The full name of the user.
 *         email:
 *           type: string
 *           description: The email address of the user.
 *         pictureURL:
 *           type: string
 *           description: The URL of the user's profile picture.
 *         createdAt:
 *           type: date
 *           description: The date and time when the user's account was created.
 *         lastLogin:
 *           type: date
 *           description: The date and time of the user's last login.
 *       required:
 *         - sub
 *         - username
 *         - email
 *         - pictureURL
 *         - createdAt
 */


/**
 * @swagger
 * /api/v1/me:
 *   get:
 *     summary: Get current user information
 *     description: Get information about the currently authenticated user.
 *     tags:
 *       - User
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: Successful response with user information
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *             example:
 *               status: success
 *               data:
 *                 user:
 *                   _id: "651ad6c6d2c220602c43388a"
 *                   sub: "118270164677248098014"
 *                   username: "Fazekas Zsolt"
 *                   email: "fzsolti1997@gmail.com"
 *                   pictureURL: "https://lh3.googleusercontent.com/a/ACg8ocIjoStPQLj5rcOf2lOH8OP0dK7HqVSQ_4Sg6kHlcDrchQ=s96-c"
 *                   createdAt: "2023-10-02T12:40:56.651Z"
 *                   lastLogin: "2023-10-06T14:25:48.931Z"
 *       '401':
 *         description: Unauthorized, user not authenticated / Token verification issue.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: The status of the response.
 *                 message:
 *                   type: string
 *                   description: Error message indicating the user is not authenticated.
 *             example:
 *               status: 'fail'
 *               message: 'Nincs bejelentkezve!'
 *       '404':
 *         description: User not found.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: The status of the response.
 *                 message:
 *                   type: string
 *                   description: Error message indicating the post was not found.
 *             example:
 *               status: 'fail'
 *               message: 'Nem található felhasználó ezzel az ID-val!😢'
 *       '500':
 *         description: Internal server error.
 */
router.get('/me',authController.protect, userController.getMe, userController.getUserById);

/**
 * @swagger
 * /api/v1/myDetails:
 *   get:
 *     summary: Get current detailed user information 
 *     description: Get information about the currently authenticated user with the posts they have created.
 *     tags:
 *       - User
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: Successful response with user information
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/User'
 *             example:
 *               status: success
 *               data:
 *                 user:
 *                   _id: "651ad6c6d2c220602c43388a"
 *                   sub: "118270164677248098014"
 *                   username: "Fazekas Zsolt"
 *                   email: "fzsolti1997@gmail.com"
 *                   pictureURL: "https://lh3.googleusercontent.com/a/ACg8ocIjoStPQLj5rcOf2lOH8OP0dK7HqVSQ_4Sg6kHlcDrchQ=s96-c"
 *                   createdAt: "2023-10-02T12:40:56.651Z"
 *                   lastLogin: "2023-10-06T14:25:48.931Z"
 *                 newsFeedPosts:
 *                   - _id: '651edac94929cc81db7c829f'
 *                     title: 'Sample News Post'
 *                     image: 'sample-image.jpg'
 *                     createdAt: '2023-10-02T10:15:08Z'
 *                     lastModified: '2023-10-07T12:05:05Z'
 *                     content: '<p>This is a sample news post content.</p>'
 *                     createdBy: '651ad6c6d2c220602c43388a'
 *                  
 *       '401':
 *         description: Unauthorized, user not authenticated / Token verification issue.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: The status of the response.
 *                 message:
 *                   type: string
 *                   description: Error message indicating the user is not authenticated.
 *             example:
 *               status: 'fail'
 *               message: 'Nincs bejelentkezve!'
 *       '404':
 *         description: User not found.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   description: The status of the response.
 *                 message:
 *                   type: string
 *                   description: Error message indicating the post was not found.
 *             example:
 *               status: 'fail'
 *               message: 'Nem található felhasználó ezzel az ID-val!😢'
 *       '500':
 *         description: Internal server error.
 */
router.get('/myDetails', authController.protect, userController.getMe, userController.getDetailedUserById);

module.exports = router;